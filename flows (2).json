[
    {
        "id": "6c4f7b6661217992",
        "type": "tab",
        "label": "door.arduino",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2349f1a54ec0af79",
        "type": "tab",
        "label": "amr.arduino-abb",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d26f2f2c5a4977cf",
        "type": "tab",
        "label": "plc-lens",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f48b4de1332248b3",
        "type": "tab",
        "label": "plc-vision",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8640188a7e6afa4e",
        "type": "tab",
        "label": "플로우 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aa5775462ff7306f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "21c53a4e1ce3f54f",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3b5c8724fb3e2a10",
        "type": "ui_group",
        "name": "Start & Crossbar",
        "tab": "21c53a4e1ce3f54f",
        "order": 1,
        "disp": true,
        "width": "5",
        "collapse": false,
        "className": ""
    },
    {
        "id": "629201d5f8a7ee2e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "2e1f8efd77e984bf",
        "type": "ui_group",
        "name": "AMR Location",
        "tab": "21c53a4e1ce3f54f",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "25ff5ad4e45a3a66",
        "type": "ui_group",
        "name": "Load",
        "tab": "21c53a4e1ce3f54f",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dashboard_group",
        "type": "ui_group",
        "name": "Arduino Terminal",
        "tab": "21c53a4e1ce3f54f",
        "order": 4,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5e5c2da792ad603b",
        "type": "ui_group",
        "name": "Vision",
        "tab": "21c53a4e1ce3f54f",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "490b5e9a722eca91",
        "type": "ui_spacer",
        "z": "f48b4de1332248b3",
        "name": "spacer",
        "group": "3b5c8724fb3e2a10",
        "order": 1,
        "width": "5",
        "height": "1"
    },
    {
        "id": "5de495fbfb925c7b",
        "type": "mqtt in",
        "z": "6c4f7b6661217992",
        "name": "입력받기",
        "topic": "/arduino/door/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "4ef7eb31aeac2d2d"
            ]
        ]
    },
    {
        "id": "39409d8495d1729c",
        "type": "debug",
        "z": "6c4f7b6661217992",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 180,
        "wires": []
    },
    {
        "id": "6e19e5af8190c9f5",
        "type": "mqtt out",
        "z": "6c4f7b6661217992",
        "name": "문 개방",
        "topic": "/arduino/door/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 570,
        "y": 40,
        "wires": []
    },
    {
        "id": "615663fa3411d051",
        "type": "inject",
        "z": "6c4f7b6661217992",
        "name": "test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "open",
        "payloadType": "str",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "6e19e5af8190c9f5"
            ]
        ]
    },
    {
        "id": "b527f57f7badc43a",
        "type": "mqtt out",
        "z": "6c4f7b6661217992",
        "name": "문 폐쇄",
        "topic": "/arduino/door/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 570,
        "y": 100,
        "wires": []
    },
    {
        "id": "25c612a13f928104",
        "type": "inject",
        "z": "6c4f7b6661217992",
        "name": "test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "close",
        "payloadType": "str",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "b527f57f7badc43a"
            ]
        ]
    },
    {
        "id": "4ef7eb31aeac2d2d",
        "type": "switch",
        "z": "6c4f7b6661217992",
        "name": "완료상태 확인",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "open_done",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "close_done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 260,
        "wires": [
            [
                "39409d8495d1729c",
                "30a47a98ef95879d",
                "e932fb393fc604a1"
            ],
            [
                "2c35195a6ea08eb5",
                "fec45c94b68de4f6"
            ]
        ]
    },
    {
        "id": "2c35195a6ea08eb5",
        "type": "debug",
        "z": "6c4f7b6661217992",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 320,
        "wires": []
    },
    {
        "id": "30a47a98ef95879d",
        "type": "mqtt out",
        "z": "6c4f7b6661217992",
        "name": "개방완료메세지전송",
        "topic": "/arduino/amr/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "956a015bfd9568ce",
        "type": "ui_led2",
        "z": "6c4f7b6661217992",
        "order": 2,
        "group": "3b5c8724fb3e2a10",
        "width": "5",
        "height": "1",
        "label": "차단기 열림",
        "property": "led_door",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "문 상태 led",
        "x": 1310,
        "y": 260,
        "wires": []
    },
    {
        "id": "e932fb393fc604a1",
        "type": "function",
        "z": "6c4f7b6661217992",
        "name": "open_done to true",
        "func": "msg.led_door = true\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 260,
        "wires": [
            [
                "956a015bfd9568ce"
            ]
        ]
    },
    {
        "id": "6be8f7cccb90daf9",
        "type": "inject",
        "z": "6c4f7b6661217992",
        "name": "서버 시작시 led초기화",
        "props": [
            {
                "p": "led_door",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "956a015bfd9568ce"
            ]
        ]
    },
    {
        "id": "fec45c94b68de4f6",
        "type": "function",
        "z": "6c4f7b6661217992",
        "name": "close_done to false",
        "func": "msg.led_door = false\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 400,
        "wires": [
            [
                "956a015bfd9568ce"
            ]
        ]
    },
    {
        "id": "753dfc197ba36937",
        "type": "mqtt in",
        "z": "2349f1a54ec0af79",
        "name": "amr메세지",
        "topic": "/arduino/amr/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 100,
        "y": 240,
        "wires": [
            [
                "1ac335cc2a2f7aaa"
            ]
        ]
    },
    {
        "id": "bce78f26052f3115",
        "type": "mqtt out",
        "z": "2349f1a54ec0af79",
        "name": "오픈 클로즈 명령 전송",
        "topic": "/arduino/door/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "1ac335cc2a2f7aaa",
        "type": "function",
        "z": "2349f1a54ec0af79",
        "name": "status에 따른 동작 전환",
        "func": "// flow 컨텍스트에 저장된 카운터를 가져옵니다. (없으면 0)\nlet doorCount = flow.get('doorCount') || 0;\n\n// 메시지가 \"door\" 인지 확인 (원하는 문자열과 비교)\nif (msg.payload === \"door\") {\n    // 카운터 증가\n    doorCount++;\n    // 2 이상의 경우, 1부터 반복 (즉, 1 또는 2)\n    if (doorCount > 2) {\n        doorCount = 1;\n    }\n    // flow 컨텍스트에 업데이트\n    flow.set('doorCount', doorCount);\n    \n    // 카운터 값에 따라 메시지 payload 설정\n    if (doorCount === 1) {\n        msg.payload = \"open\";\n        msg.led_amr = 2;\n    } else if (doorCount === 2) {\n        msg.payload = \"close\";\n        msg.led_amr = 2;\n    }\n    // 결과 메시지 전송\n    return msg;\n} else if (msg.payload === 'ready'){\n    // ready 메시지면 led를 abb로 전환\n    msg.led_amr = 3;\n    return msg;\n} else if (msg.payload === \"arrived\"){\n    msg.led_amr = 3;\n    return msg;\n} else if (msg.payload === \"drop\"){\n    msg.payload = \"go\";\n    msg.led_amr = 4;\n    return msg;\n} else if (msg.payload === \"home\"){\n    msg.led_amr = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "bce78f26052f3115",
                "74fbbdb2f1ad91fa",
                "d058aa6fc616aec1",
                "b8c93d9733af1d9e",
                "a6e745d67b310a09",
                "09f8133f0f4f2317",
                "2245b64de06659f6"
            ]
        ]
    },
    {
        "id": "82d30b19b1e4e778",
        "type": "inject",
        "z": "2349f1a54ec0af79",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "door",
        "payloadType": "str",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "1ac335cc2a2f7aaa"
            ]
        ]
    },
    {
        "id": "74fbbdb2f1ad91fa",
        "type": "ui_led2",
        "z": "2349f1a54ec0af79",
        "order": 1,
        "group": "2e1f8efd77e984bf",
        "width": "4",
        "height": "1",
        "label": "충전독",
        "property": "led_amr",
        "labelPlacement": "left",
        "labelAlignment": "right",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "4",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "충전독",
        "x": 1170,
        "y": 140,
        "wires": []
    },
    {
        "id": "e1e55625181cd341",
        "type": "inject",
        "z": "2349f1a54ec0af79",
        "name": "시작시 초기화",
        "props": [
            {
                "p": "led_amr",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "74fbbdb2f1ad91fa",
                "d058aa6fc616aec1",
                "b8c93d9733af1d9e",
                "a6e745d67b310a09"
            ]
        ]
    },
    {
        "id": "d058aa6fc616aec1",
        "type": "ui_led2",
        "z": "2349f1a54ec0af79",
        "order": 2,
        "group": "2e1f8efd77e984bf",
        "width": "4",
        "height": "1",
        "label": "차단기",
        "property": "led_amr",
        "labelPlacement": "left",
        "labelAlignment": "right",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "4",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "차단기",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "b8c93d9733af1d9e",
        "type": "ui_led2",
        "z": "2349f1a54ec0af79",
        "order": 3,
        "group": "2e1f8efd77e984bf",
        "width": "4",
        "height": "1",
        "label": "ABB",
        "property": "led_amr",
        "labelPlacement": "left",
        "labelAlignment": "right",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "4",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "ABB",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "a6e745d67b310a09",
        "type": "ui_led2",
        "z": "2349f1a54ec0af79",
        "order": 4,
        "group": "2e1f8efd77e984bf",
        "width": "4",
        "height": "1",
        "label": "배송장소",
        "property": "led_amr",
        "labelPlacement": "left",
        "labelAlignment": "right",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "4",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "2",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "3",
                "valueType": "num"
            },
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "배송장소",
        "x": 1180,
        "y": 320,
        "wires": []
    },
    {
        "id": "c629fa65c215f0c8",
        "type": "ui_button",
        "z": "2349f1a54ec0af79",
        "name": "",
        "group": "3b5c8724fb3e2a10",
        "order": 1,
        "width": "5",
        "height": "5",
        "passthru": false,
        "label": "공정 시작",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "start",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "c3658f28ebb20e0a",
                "62a0e94000b870ce"
            ]
        ]
    },
    {
        "id": "c3658f28ebb20e0a",
        "type": "mqtt out",
        "z": "2349f1a54ec0af79",
        "name": "시작명령전송",
        "topic": "/arduino/amr/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "62a0e94000b870ce",
        "type": "debug",
        "z": "2349f1a54ec0af79",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 100,
        "wires": []
    },
    {
        "id": "443d0a6f924ede5a",
        "type": "inject",
        "z": "2349f1a54ec0af79",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ready",
        "payloadType": "str",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "1ac335cc2a2f7aaa"
            ]
        ]
    },
    {
        "id": "09f8133f0f4f2317",
        "type": "switch",
        "z": "2349f1a54ec0af79",
        "name": "arrived 검출",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "arrived",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "787b0417468e1997",
                "d9047e81d487ea56"
            ]
        ]
    },
    {
        "id": "c7f8c1eced557545",
        "type": "inject",
        "z": "2349f1a54ec0af79",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "arrived",
        "payloadType": "str",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "1ac335cc2a2f7aaa"
            ]
        ]
    },
    {
        "id": "787b0417468e1997",
        "type": "tcp request",
        "z": "2349f1a54ec0af79",
        "name": "",
        "server": "192.168.0.201",
        "port": "5000",
        "out": "count",
        "ret": "string",
        "splitc": "12",
        "newline": "\\n",
        "trim": false,
        "tls": "",
        "x": 690,
        "y": 560,
        "wires": [
            [
                "8811d980abf1160e",
                "def7c384e6893c4d"
            ]
        ]
    },
    {
        "id": "8811d980abf1160e",
        "type": "debug",
        "z": "2349f1a54ec0af79",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 560,
        "wires": []
    },
    {
        "id": "196aced911622bc8",
        "type": "inject",
        "z": "2349f1a54ec0af79",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "drop",
        "payloadType": "str",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "1ac335cc2a2f7aaa"
            ]
        ]
    },
    {
        "id": "def7c384e6893c4d",
        "type": "function",
        "z": "2349f1a54ec0af79",
        "name": "메세지 가공",
        "func": "if (msg.payload === 'package_done'){\n    msg.payload = 'package';\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 620,
        "wires": [
            [
                "d66fdb1f698e9511"
            ]
        ]
    },
    {
        "id": "d66fdb1f698e9511",
        "type": "mqtt out",
        "z": "2349f1a54ec0af79",
        "name": "패키지 전송",
        "topic": "/arduino/amr/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 1230,
        "y": 620,
        "wires": []
    },
    {
        "id": "4f5ad4a83c11cf8a",
        "type": "inject",
        "z": "2349f1a54ec0af79",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "home",
        "payloadType": "str",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "1ac335cc2a2f7aaa"
            ]
        ]
    },
    {
        "id": "d9047e81d487ea56",
        "type": "debug",
        "z": "2349f1a54ec0af79",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 480,
        "wires": []
    },
    {
        "id": "eda8c923c9e9f32c",
        "type": "mqtt out",
        "z": "2349f1a54ec0af79",
        "name": "plc시작",
        "topic": "/arduino/plc/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 1180,
        "y": 380,
        "wires": []
    },
    {
        "id": "c5d23156b353cc6a",
        "type": "debug",
        "z": "2349f1a54ec0af79",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 460,
        "wires": []
    },
    {
        "id": "2245b64de06659f6",
        "type": "switch",
        "z": "2349f1a54ec0af79",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "go",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 320,
        "wires": [
            [
                "eda8c923c9e9f32c",
                "c5d23156b353cc6a"
            ]
        ]
    },
    {
        "id": "f2c427312fcfaa3c",
        "type": "mqtt in",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "topic": "/arduino/plc/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "a9b3ab40d34fe8ab"
            ]
        ]
    },
    {
        "id": "98ee3a819968e67f",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "go",
        "payloadType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "469f9fc3dd4ad757",
                "e6dc6b073d74ef99"
            ]
        ]
    },
    {
        "id": "15b24d4252220bfe",
        "type": "mqtt in",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "topic": "/arduino/lens/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "20af0dc6327d663b",
                "a9b3ab40d34fe8ab",
                "e6dc6b073d74ef99"
            ]
        ]
    },
    {
        "id": "20af0dc6327d663b",
        "type": "debug",
        "z": "d26f2f2c5a4977cf",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 180,
        "wires": []
    },
    {
        "id": "05ff81b7048369da",
        "type": "ui_led",
        "z": "d26f2f2c5a4977cf",
        "order": 3,
        "group": "25ff5ad4e45a3a66",
        "width": 4,
        "height": 1,
        "label": "적재상태",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "a1",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "1",
        "x": 1210,
        "y": 240,
        "wires": []
    },
    {
        "id": "d8f327fc864094c4",
        "type": "ui_led",
        "z": "d26f2f2c5a4977cf",
        "order": 4,
        "group": "25ff5ad4e45a3a66",
        "width": 4,
        "height": 1,
        "label": "적재상태",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "a2",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "2",
        "x": 1210,
        "y": 320,
        "wires": []
    },
    {
        "id": "9ec49910406a5189",
        "type": "ui_led",
        "z": "d26f2f2c5a4977cf",
        "order": 7,
        "group": "25ff5ad4e45a3a66",
        "width": 4,
        "height": 1,
        "label": "적재상태",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "a3",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "3",
        "x": 1210,
        "y": 400,
        "wires": []
    },
    {
        "id": "74de0ad3e1b576cc",
        "type": "ui_led",
        "z": "d26f2f2c5a4977cf",
        "order": 8,
        "group": "25ff5ad4e45a3a66",
        "width": 4,
        "height": 1,
        "label": "적재상태",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "a4",
                "valueType": "str"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showGlow": true,
        "name": "4",
        "x": 1210,
        "y": 480,
        "wires": []
    },
    {
        "id": "08809a9b018bf4f8",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 950,
        "y": 180,
        "wires": [
            [
                "d8f327fc864094c4",
                "9ec49910406a5189",
                "74de0ad3e1b576cc",
                "05ff81b7048369da"
            ]
        ]
    },
    {
        "id": "a9b3ab40d34fe8ab",
        "type": "function",
        "z": "d26f2f2c5a4977cf",
        "name": "창고 대시보드 표현",
        "func": "// 텍스트 정보(\"c\"로 시작하는 메시지)를 배열에 순차적으로 저장\nif (typeof msg.payload === \"string\" && msg.payload.startsWith(\"c\")) {\n    // 기존 배열 가져오기 (없으면 빈 배열)\n    var texts = flow.get(\"savedTexts\") || [];\n    \n    // 배열의 길이가 4 미만일 경우에만 추가 (원하는 경우)\n    if(texts.length < 4) {\n        texts.push(msg.payload);\n    }\n    // 또는 항상 추가하고 싶다면 texts.push(msg.payload);\n    \n    // 배열 저장\n    flow.set(\"savedTexts\", texts);\n    \n    // 저장만 하고 바로 출력할 필요 없으므로 메시지 반환하지 않음\n    return null;\n}\n\n// LED 정보(\"a\"로 시작하는 메시지)가 들어왔을 때 처리\nif (typeof msg.payload === \"string\" && msg.payload.startsWith(\"a\")) {\n    // 저장된 텍스트 배열 가져오기\n    var texts = flow.get(\"savedTexts\") || [];\n    \n    // LED 메시지 예: \"a1\"이면 숫자 1을 추출하여 인덱스로 변환 (0번 인덱스와 대응)\n    var idx = parseInt(msg.payload.substring(1)) - 1;\n    \n    // LED 데이터는 그대로 msg.led에 할당, 텍스트는 배열에서 해당 인덱스의 요소를 가져옴\n    msg.led = msg.payload;\n    msg.text = texts[idx] || \"\";\n    \n    // 결합된 데이터를 다음 노드(대시보드 등)로 전송\n    return msg;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 280,
        "wires": [
            [
                "1414b053b7ded7cf",
                "3292088e33ef6933",
                "1d33a46188d2e1fe",
                "e854099e2a6a1041",
                "62de935f3a77227b"
            ]
        ]
    },
    {
        "id": "6eafc8da8f8ee1f4",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "a1",
        "payloadType": "str",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "a9b3ab40d34fe8ab"
            ]
        ]
    },
    {
        "id": "43986e84fcbaa8c7",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "c1",
        "payloadType": "str",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "a9b3ab40d34fe8ab"
            ]
        ]
    },
    {
        "id": "1414b053b7ded7cf",
        "type": "debug",
        "z": "d26f2f2c5a4977cf",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "led",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 500,
        "wires": []
    },
    {
        "id": "3292088e33ef6933",
        "type": "debug",
        "z": "d26f2f2c5a4977cf",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "text",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "f351976d54fced6c",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "c2",
        "payloadType": "str",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "a9b3ab40d34fe8ab"
            ]
        ]
    },
    {
        "id": "f6c42392f4ccd2f7",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "a2",
        "payloadType": "str",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "a9b3ab40d34fe8ab"
            ]
        ]
    },
    {
        "id": "1d33a46188d2e1fe",
        "type": "function",
        "z": "d26f2f2c5a4977cf",
        "name": "function 1",
        "func": "msg.payload = msg.led;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 280,
        "wires": [
            [
                "1b2263c0220d1afa"
            ]
        ]
    },
    {
        "id": "1b2263c0220d1afa",
        "type": "switch",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "a1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 950,
        "y": 280,
        "wires": [
            [
                "05ff81b7048369da"
            ],
            [
                "d8f327fc864094c4"
            ],
            [
                "9ec49910406a5189"
            ],
            [
                "74de0ad3e1b576cc"
            ]
        ]
    },
    {
        "id": "c62f31e7a060d919",
        "type": "ui_text",
        "z": "d26f2f2c5a4977cf",
        "group": "25ff5ad4e45a3a66",
        "order": 1,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "창고1 : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1210,
        "y": 560,
        "wires": []
    },
    {
        "id": "b8cdb4bc3395b6f6",
        "type": "ui_text",
        "z": "d26f2f2c5a4977cf",
        "group": "25ff5ad4e45a3a66",
        "order": 2,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "창고2 : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1210,
        "y": 620,
        "wires": []
    },
    {
        "id": "502af848ae2d53f4",
        "type": "ui_text",
        "z": "d26f2f2c5a4977cf",
        "group": "25ff5ad4e45a3a66",
        "order": 5,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "창고3 : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1210,
        "y": 680,
        "wires": []
    },
    {
        "id": "7b08d76293f5737c",
        "type": "ui_text",
        "z": "d26f2f2c5a4977cf",
        "group": "25ff5ad4e45a3a66",
        "order": 6,
        "width": 4,
        "height": 2,
        "name": "",
        "label": "창고4 : ",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1210,
        "y": 740,
        "wires": []
    },
    {
        "id": "e854099e2a6a1041",
        "type": "function",
        "z": "d26f2f2c5a4977cf",
        "name": "function 2",
        "func": "if (msg.text === \"c1\"){\n    msg.payload = \"고배율\";\n} else if (msg.text === \"c2\"){\n    msg.payload = \"저배율\";\n} else if (msg.text === \"c3\"){\n    msg.payload = \"중배율\";\n}\n    \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 340,
        "wires": [
            [
                "48d97b99f3640f8c"
            ]
        ]
    },
    {
        "id": "48d97b99f3640f8c",
        "type": "switch",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "property": "led",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "a1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 950,
        "y": 380,
        "wires": [
            [
                "c62f31e7a060d919"
            ],
            [
                "b8cdb4bc3395b6f6"
            ],
            [
                "502af848ae2d53f4"
            ],
            [
                "7b08d76293f5737c"
            ]
        ]
    },
    {
        "id": "469f9fc3dd4ad757",
        "type": "function",
        "z": "d26f2f2c5a4977cf",
        "name": "function 3",
        "func": "// 필요에 따라 flow 컨텍스트의 변수를 초기화하는 코드\nflow.set(\"savedTexts\", []); // 텍스트 데이터를 저장할 배열을 빈 배열로 초기화\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 60,
        "wires": [
            [
                "9ea74f5a2f3f6d99"
            ]
        ]
    },
    {
        "id": "9ea74f5a2f3f6d99",
        "type": "debug",
        "z": "d26f2f2c5a4977cf",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 60,
        "wires": []
    },
    {
        "id": "e95d8814bb8f7d2b",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 970,
        "y": 660,
        "wires": [
            [
                "c62f31e7a060d919",
                "b8cdb4bc3395b6f6",
                "502af848ae2d53f4",
                "7b08d76293f5737c"
            ]
        ]
    },
    {
        "id": "169ad29ed26192cd",
        "type": "inject",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 350,
        "y": 500,
        "wires": [
            [
                "a9b3ab40d34fe8ab"
            ]
        ]
    },
    {
        "id": "62de935f3a77227b",
        "type": "debug",
        "z": "d26f2f2c5a4977cf",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 620,
        "wires": []
    },
    {
        "id": "e6dc6b073d74ef99",
        "type": "mqtt out",
        "z": "d26f2f2c5a4977cf",
        "name": "",
        "topic": "/arduino/plc/cmd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "e472bdf5f8bda3d4",
        "type": "exec",
        "z": "f48b4de1332248b3",
        "command": "source ~/myenv/bin/activate && python3 ~/Desktop/tensorflow/project4_test.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "virtual env / server on",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "731790e22757acff"
            ],
            [
                "731790e22757acff"
            ],
            [
                "731790e22757acff"
            ]
        ]
    },
    {
        "id": "89daa85b4fcfa362",
        "type": "inject",
        "z": "f48b4de1332248b3",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "9937f961788d7a43",
                "e472bdf5f8bda3d4"
            ]
        ]
    },
    {
        "id": "428715be50f77c6a",
        "type": "inject",
        "z": "f48b4de1332248b3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "vi",
        "payloadType": "str",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "245659d3c5217b4c"
            ]
        ]
    },
    {
        "id": "245659d3c5217b4c",
        "type": "http request",
        "z": "f48b4de1332248b3",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "http://192.168.0.188:8080/?action=snapshot",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "7866d6b9884c538b"
            ]
        ]
    },
    {
        "id": "75df5d64b4e13411",
        "type": "image",
        "z": "f48b4de1332248b3",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": false,
        "outputs": 0,
        "x": 960,
        "y": 360,
        "wires": []
    },
    {
        "id": "7866d6b9884c538b",
        "type": "base64",
        "z": "f48b4de1332248b3",
        "name": "",
        "action": "",
        "property": "payload",
        "x": 660,
        "y": 300,
        "wires": [
            [
                "75df5d64b4e13411",
                "35ce8952b4a79499",
                "42082881c5c0c62f"
            ]
        ]
    },
    {
        "id": "9937f961788d7a43",
        "type": "exec",
        "z": "f48b4de1332248b3",
        "command": "mjpg_streamer -i \"input_uvc.so -n -r 640x480 -f 10\" -o \"output_http.so -w ./www\"",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "cam server on",
        "x": 420,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "35ce8952b4a79499",
        "type": "mqtt out",
        "z": "f48b4de1332248b3",
        "name": "data for vision",
        "topic": "/vision/data",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "5f7b4cd0c5ee4851",
        "type": "mqtt in",
        "z": "f48b4de1332248b3",
        "name": "return from vision server",
        "topic": "/vision/result",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 580,
        "wires": [
            [
                "754fad9e068f53f2",
                "ac82f4190942bd9d"
            ]
        ]
    },
    {
        "id": "754fad9e068f53f2",
        "type": "switch",
        "z": "f48b4de1332248b3",
        "name": "select return",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "normal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "defect",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 490,
        "y": 580,
        "wires": [
            [
                "1074711baf89ddec",
                "7a34334d3365ed3f"
            ],
            [
                "69d5ea3793c3e40e",
                "a7fa1a01d659b078"
            ],
            [
                "6b29ad3b782ee696"
            ]
        ]
    },
    {
        "id": "b716fa862b9094cd",
        "type": "mqtt out",
        "z": "f48b4de1332248b3",
        "name": "",
        "topic": "/arduino/plc/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 960,
        "y": 580,
        "wires": []
    },
    {
        "id": "ccf9ed45ed3e974d",
        "type": "mqtt out",
        "z": "f48b4de1332248b3",
        "name": "",
        "topic": "/arduino/plc/cmd",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa5775462ff7306f",
        "x": 960,
        "y": 640,
        "wires": []
    },
    {
        "id": "1074711baf89ddec",
        "type": "function",
        "z": "f48b4de1332248b3",
        "name": "function 4",
        "func": "msg.payload = \"s1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 580,
        "wires": [
            [
                "b716fa862b9094cd"
            ]
        ]
    },
    {
        "id": "69d5ea3793c3e40e",
        "type": "function",
        "z": "f48b4de1332248b3",
        "name": "function 5",
        "func": "msg.payload = \"s2\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 620,
        "wires": [
            [
                "ccf9ed45ed3e974d"
            ]
        ]
    },
    {
        "id": "42082881c5c0c62f",
        "type": "debug",
        "z": "f48b4de1332248b3",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "fa0feb7f1a7c565e",
        "type": "mqtt in",
        "z": "f48b4de1332248b3",
        "name": "",
        "topic": "/arduino/plc/status",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "d5fd59d32babeb92",
                "a8feca0d0fc05d09"
            ]
        ]
    },
    {
        "id": "6b29ad3b782ee696",
        "type": "debug",
        "z": "f48b4de1332248b3",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "731790e22757acff",
        "type": "debug",
        "z": "f48b4de1332248b3",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 100,
        "wires": []
    },
    {
        "id": "7a34334d3365ed3f",
        "type": "debug",
        "z": "f48b4de1332248b3",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 440,
        "wires": []
    },
    {
        "id": "a7fa1a01d659b078",
        "type": "debug",
        "z": "f48b4de1332248b3",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 480,
        "wires": []
    },
    {
        "id": "d5fd59d32babeb92",
        "type": "switch",
        "z": "f48b4de1332248b3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "vi",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "245659d3c5217b4c"
            ]
        ]
    },
    {
        "id": "9118ac2c6dbcc6bd",
        "type": "ui_template",
        "z": "f48b4de1332248b3",
        "group": "5e5c2da792ad603b",
        "name": "",
        "order": 1,
        "width": "6",
        "height": "7",
        "format": "<div style=\"text-align: center;\">\n  <h3>실시간 영상</h3>\n  <img id=\"mjpeg\" src=\"http://localhost:8080/?action=stream\" width=\"320\" height=\"240\" />\n  <p style=\"font-size: 24px;\">\n    결과: \n    <span id=\"vision-result\" style=\"font-size: 32px; font-weight: bold; color: gray;\">없음</span>\n  </p>\n</div>\n\n<script>\n  (function(scope) {\n    scope.$watch('msg', function(msg) {\n      if (!msg || !msg.payload || !msg.topic) return;\n\n      const el = document.getElementById(\"vision-result\");\n\n      const isStatus = msg.topic === \"/arduino/plc/status\";\n      const isVision = msg.topic === \"/vision/result\";\n\n      const statusCodes = [\"a1\", \"a2\", \"a3\", \"a4\"];\n      const visionCodes = [\"normal\", \"defect\"];\n\n      if (isStatus && statusCodes.includes(msg.payload)) {\n        el.textContent = \"None\";\n        el.style.color = \"gray\";\n      }\n      else if (isVision && visionCodes.includes(msg.payload)) {\n        el.textContent = msg.payload;\n\n        if (msg.payload === \"normal\") {\n          el.style.color = \"blue\";\n        } else if (msg.payload === \"defect\") {\n          el.style.color = \"red\";\n        }\n      }\n      else {\n        // 그 외는 전부 초기화\n        el.textContent = \"None\";\n        el.style.color = \"gray\";\n      }\n    });\n  })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a8feca0d0fc05d09",
        "type": "switch",
        "z": "f48b4de1332248b3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "a1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "a4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 310,
        "y": 420,
        "wires": [
            [
                "9118ac2c6dbcc6bd"
            ],
            [
                "9118ac2c6dbcc6bd"
            ],
            [
                "9118ac2c6dbcc6bd"
            ],
            [
                "9118ac2c6dbcc6bd"
            ]
        ]
    },
    {
        "id": "ac82f4190942bd9d",
        "type": "switch",
        "z": "f48b4de1332248b3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "normal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "defect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 520,
        "wires": [
            [
                "9118ac2c6dbcc6bd"
            ],
            [
                "9118ac2c6dbcc6bd"
            ]
        ]
    },
    {
        "id": "0626416db26ba0ed",
        "type": "inject",
        "z": "f48b4de1332248b3",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "e803de93d9886939"
            ]
        ]
    },
    {
        "id": "e803de93d9886939",
        "type": "function",
        "z": "f48b4de1332248b3",
        "name": "function 6",
        "func": "return {\n    topic: \"/arduino/plc/status\",\n    payload: \"a1\"\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 480,
        "wires": [
            [
                "9118ac2c6dbcc6bd"
            ]
        ]
    },
    {
        "id": "a5f61e174ac423b5",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/door/debug",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 60,
        "wires": [
            [
                "ui_arduino_1"
            ]
        ]
    },
    {
        "id": "dd8fdd57ef562af5",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/amr/debug",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 690,
        "y": 60,
        "wires": [
            [
                "70f308c02bdcb0fd"
            ]
        ]
    },
    {
        "id": "33fc6adba3f5d769",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/lens/debug",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "d406504380f0347a"
            ]
        ]
    },
    {
        "id": "10693be20432ce96",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/plc/debug",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 180,
        "wires": [
            [
                "7f753b788a02b3ee"
            ]
        ]
    },
    {
        "id": "ui_arduino_1",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Arduino Door",
        "order": 1,
        "width": 6,
        "height": "3",
        "format": "<div id=\"door-card\" class=\"white-card\">\n  <h4>$ Arduino Door</h4>\n  <pre id=\"msg-log-door\"></pre>\n</div>\n\n<script>\n(function(scope) {\n    scope.messages1 = scope.messages1 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 메시지 누적\n        scope.messages1.push(msg.payload);\n\n        if (scope.messages1.length > 100) {\n            scope.messages1.shift();\n        }\n\n        const text = scope.messages1.join('\\n');\n\n        // 메시지 표시\n        const preElem = document.getElementById('msg-log-door');\n        if (preElem) {\n            preElem.innerText = text;\n        }\n\n        // 카드 박스 스크롤 아래로 (렌더링 이후)\n        const card = document.getElementById('door-card');\n        if (card) {\n            setTimeout(() => {\n                card.scrollTop = card.scrollHeight;\n            }, 20);\n        }\n    });\n})(scope);\n</script>\n\n<style>\n.white-card {\n  background-color: #ffffff !important;\n  color: #000000 !important;\n  font-family: 'Courier New', monospace;\n  padding: 15px;\n  border-radius: 6px;\n  margin: 6px 0;\n  border-left: 4px solid #000000;\n  white-space: pre-wrap;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n\n  /* 카드 자체가 스크롤 되도록 */\n  max-height: 250px;\n  overflow-y: auto;\n}\n\n.white-card h4 {\n  margin-top: 0;\n  font-weight: normal;\n  color: #000000 !important;\n}\n\n.white-card pre {\n  margin: 0 !important;\n  padding: 0 !important;\n  border: none !important;\n  font-family: inherit !important;\n  white-space: pre-wrap !important;\n  box-shadow: none !important;\n}\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ui_reply_1",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Reply Door",
        "order": 2,
        "width": 6,
        "height": "3",
        "format": "<div id=\"door_cmd-card\" class=\"white-card\">\n  <h4>&gt; Arduino Door CMD</h4>\n  <pre id=\"msg-log-door_cmd\">{{msg.payload}}</pre>\n</div>\n\n<script>\n    (function(scope) {\n    scope.messages2 = scope.messages2 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 메시지 누적\n        scope.messages2.push(msg.payload);\n\n        if (scope.messages2.length > 100) {\n            scope.messages2.shift();\n        }\n\n        const text = scope.messages2.join('\\n');\n\n        // 메시지 표시\n        const preElem = document.getElementById('msg-log-door_cmd');\n        if (preElem) {\n            preElem.innerText = text;\n        }\n\n        // 카드 박스 스크롤 아래로 (렌더링 이후)\n        const card = document.getElementById('door_cmd-card');\n        if (card) {\n            setTimeout(() => {\n                card.scrollTop = card.scrollHeight;\n            }, 20);\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "55759d9d512f39fd",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/door/cmd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 120,
        "wires": [
            [
                "ui_reply_1"
            ]
        ]
    },
    {
        "id": "70f308c02bdcb0fd",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Arduino Amr",
        "order": 3,
        "width": 6,
        "height": "3",
        "format": "<div id=\"amr-card\" class=\"white-card\">\n  <h4>$ Arduino Amr</h4>\n  <pre id=\"msg-log-amr\">{{msg.payload}}</pre>\n</div>\n<script>\n(function(scope) {\n    scope.messages3 = scope.messages3 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 메시지 누적\n        scope.messages3.push(msg.payload);\n\n        if (scope.messages3.length > 100) {\n            scope.messages3.shift();\n        }\n\n        const text = scope.messages3.join('\\n');\n\n        // 메시지 표시\n        const preElem = document.getElementById('msg-log-amr');\n        if (preElem) {\n            preElem.innerText = text;\n        }\n\n        // 카드 박스 스크롤 아래로 (렌더링 이후)\n        const card = document.getElementById('amr-card');\n        if (card) {\n            setTimeout(() => {\n                card.scrollTop = card.scrollHeight;\n            }, 20);\n        }\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7f753b788a02b3ee",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Arduino PLC",
        "order": 5,
        "width": 6,
        "height": "3",
        "format": "<div id=\"plc-card\" class=\"white-card\">\n  <h4>$ Arduino PLC</h4>\n  <pre id=\"msg-log-plc\">{{msg.payload}}</pre>\n</div>\n<script>\n(function(scope) {\n    // 메시지 누적 배열이 없으면 초기화\n    scope.messages5 = scope.messages5 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 새로운 메시지 추가\n        scope.messages5.push(msg.payload);\n\n        // 최대 100개까지만 유지 (필요에 따라 조정 가능)\n        if (scope.messages5.length > 100) {\n            scope.messages5.shift();\n        }\n\n        // 화면에 표시할 문자열 구성\n        const text = scope.messages5.join('\\n');\n\n        \n        // 메시지 표시\n        const preElem = document.getElementById('msg-log-plc');\n        if (preElem) {\n            preElem.innerText = text;\n        }\n\n        // 카드 박스 스크롤 아래로 (렌더링 이후)\n        const card = document.getElementById('plc-card');\n        if (card) {\n            setTimeout(() => {\n                card.scrollTop = card.scrollHeight;\n            }, 20);\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d406504380f0347a",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Arduino Lens",
        "order": 7,
        "width": 6,
        "height": "3",
        "format": "<div id=\"lens-card\" class=\"white-card\">\n  <h4>$ Arduino Lens</h4>\n  <pre id=\"msg-log-lens\">{{msg.payload}}</pre>\n</div><script>\n    (function(scope) {\n    // 메시지 누적 배열이 없으면 초기화\n    scope.messages7 = scope.messages7 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 새로운 메시지 추가\n        scope.messages7.push(msg.payload);\n\n        // 최대 100개까지만 유지 (필요에 따라 조정 가능)\n        if (scope.messages7.length > 100) {\n            scope.messages7.shift();\n        }\n\n        // 화면에 표시할 문자열 구성\n        const text = scope.messages7.join('\\n');\n// 메시지 표시\nconst preElem = document.getElementById('msg-log-lens');\nif (preElem) {\npreElem.innerText = text;\n}\n\n// 카드 박스 스크롤 아래로 (렌더링 이후)\nconst card = document.getElementById('lens-card');\nif (card) {\nsetTimeout(() => {\ncard.scrollTop = card.scrollHeight;\n}, 20);\n}\n    });\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a93de3fbc4b19bd1",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Reply Amr",
        "order": 4,
        "width": 6,
        "height": "3",
        "format": "<div id=\"amr_cmd-card\" class=\"white-card\">\n  <h4>&gt; Arduino Amr CMD</h4>\n  <pre id=\"msg-log-amr_cmd\">{{msg.payload}}</pre>\n</div>\n\n<script>\n(function(scope) {\n    // 메시지 누적 배열이 없으면 초기화\n    scope.messages4 = scope.messages4 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 새로운 메시지 추가\n        scope.messages4.push(msg.payload);\n\n        // 최대 100개까지만 유지 (필요에 따라 조정 가능)\n        if (scope.messages4.length > 100) {\n            scope.messages4.shift();\n        }\n\n        // 화면에 표시할 문자열 구성\n        const text = scope.messages4.join('\\n');\n\n        \n        // 메시지 표시\n        const preElem = document.getElementById('msg-log-amr_cmd');\n        if (preElem) {\n            preElem.innerText = text;\n        }\n\n        // 카드 박스 스크롤 아래로 (렌더링 이후)\n        const card = document.getElementById('amr_cmd-card');\n        if (card) {\n            setTimeout(() => {\n                card.scrollTop = card.scrollHeight;\n            }, 20);\n        }\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9e8b0d73f4171e30",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/amr/cmd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 680,
        "y": 120,
        "wires": [
            [
                "a93de3fbc4b19bd1"
            ]
        ]
    },
    {
        "id": "d3a6bf3143238d35",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Reply PLC",
        "order": 6,
        "width": 6,
        "height": "3",
        "format": "<div id=\"plc_cmd-card\" class=\"white-card\">\n  <h4>&gt; Arduino PLC CMD</h4>\n  <pre id=\"msg-log-plc_cmd\">{{msg.payload}}</pre>\n</div>\n<script>\n(function(scope) {\n    // 메시지 누적 배열이 없으면 초기화\n    scope.messages6 = scope.messages6 || [];\n\n    scope.$watch('msg', function(msg) {\n        if (!msg) return;\n\n        // 새로운 메시지 추가\n        scope.messages6.push(msg.payload);\n\n        // 최대 100개까지만 유지 (필요에 따라 조정 가능)\n        if (scope.messages6.length > 100) {\n            scope.messages6.shift();\n        }\n\n        // 화면에 표시할 문자열 구성\n        const text = scope.messages6.join('\\n');\n// 메시지 표시\nconst preElem = document.getElementById('msg-log-plc_cmd');\nif (preElem) {\npreElem.innerText = text;\n}\n\n// 카드 박스 스크롤 아래로 (렌더링 이후)\nconst card = document.getElementById('plc_cmd-card');\nif (card) {\nsetTimeout(() => {\ncard.scrollTop = card.scrollHeight;\n}, 20);\n}\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 480,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "cc7edbbc0deb34b0",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/plc/cmd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 240,
        "wires": [
            [
                "d3a6bf3143238d35"
            ]
        ]
    },
    {
        "id": "6021e2a4b84564c4",
        "type": "mqtt in",
        "z": "8640188a7e6afa4e",
        "name": "",
        "topic": "/arduino/lens/cmd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa5775462ff7306f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 690,
        "y": 240,
        "wires": [
            [
                "5dac55d47b654c9d"
            ]
        ]
    },
    {
        "id": "5dac55d47b654c9d",
        "type": "ui_template",
        "z": "8640188a7e6afa4e",
        "group": "dashboard_group",
        "name": "UI Reply Lens",
        "order": 8,
        "width": 6,
        "height": "3",
        "format": "<div class=\"white-card\">\n  <h4>&gt; Arduino Lens CMD</h4>\n  <pre id=\"msg-log-lens_cmd\">{{msg.payload}}</pre>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 240,
        "wires": [
            []
        ]
    }
]